#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 官方最新开发版openwrt动态DHCP 使用docker 

name: openwrt-23.05.2
on:
  repository_dispatch:
  workflow_dispatch:
   
jobs:

  build_openwrt:
    name: Build OpenWrt firmware
    runs-on: ubuntu-latest
    steps:
      - name: 释放Ubuntu磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true 
      
      - name: CPU检测
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
      - name: 准备完成
        uses: actions/checkout@v4

      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update 
          sudo -E apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          
      - name: Clone source code
        run: |
         wget https://github.com/openwrt/openwrt/archive/refs/tags/v23.05.2.zip
         unzip v23.05.2.zip
         mv openwrt-23.05.2 openwrt
      - name: Update feeds
        run: |
          cd openwrt
          cat >> feeds.conf.default <<EOF 
          src-git kenzo https://github.com/kenzok8/openwrt-packages
          src-git small https://github.com/kenzok8/small
          # src-git ddd https://github.com/wandduse/openwrt-packages
          # src-git ddd https://github.com/kiddin9/openwrt-packages
          # src-git kiddin https://github.com/kiddin9/openwrt-packages.git
          EOF
          # 静态 to DHCP
           sed -i 's/-static/-dhcp/g' package/base-files/files/lib/functions/uci-defaults.sh
           sed -i 's/none/dhcp/g' package/base-files/files/bin/config_generate
          
          ./scripts/feeds update -a && rm -rf feeds/luci/applications/luci-app-mosdns
          # rm -rf feeds/packages/net/{alist,adguardhome,xray*,v2ray*,v2ray*,sing*,smartdns}
          rm -rf feeds/packages/lang/golang
          git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
          ./scripts/feeds install -a 
          
          # sed -i 's/Authorization Required/wanuse.com/g' feeds/luci/modules/luci-base/ucode/template/sysauth.ut
          sed -i 's/Authorization Required/openwrt v23.05.2 wanuse.com/g' feeds/luci/themes/luci-theme-bootstrap/htdocs/luci-static/resources/view/bootstrap/sysauth.js
          sed -i 's/需要授权/openwrt v23.05.2 wanuse.com/g' feeds/luci/modules/luci-base/po/zh_Hans/base.po
          
          
     
      - name: Generate configuration file
        run: |
          cd openwrt
          
          rm -f ./.config*
          rm -rf ./tmp && rm -rf .config
          touch ./.config          
          cat >> .config <<EOF 
          # CONFIG_VMDK_IMAGES is not set
          # CONFIG_GRUB_EFI_IMAGES is not set
          # CONFIG_TARGET_ROOTFS_EXT4FS is not set
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_ROOTFS_TARGZ=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=1024
          # CONFIG_PACKAGE_dnsmasq is not set
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-rpc=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_luci-app-uhttpd=y
          CONFIG_PACKAGE_dnsmasq_full=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_qrencode=y
          CONFIG_PACKAGE_libqrencode=y
          CONFIG_PACKAGE_block-mount=y          
          CONFIG_PACKAGE_docker=y
          CONFIG_PACKAGE_dockerd=y
          CONFIG_PACKAGE_luci-app-docker=y
          CONFIG_PACKAGE_luci-lib-docker=y
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          CONFIG_PACKAGE_docker-compose=y
          CONFIG_DOCKER_CGROUP_OPTIONS=y
          CONFIG_PACKAGE_docker-compose=y
          CONFIG_PACKAGE_containerd=y
          CONFIG_PACKAGE_runc=y
          CONFIG_DOCKER_NET_MACVLAN=y
          CONFIG_PACKAGE_libnetwork=y
          CONFIG_DOCKER_OPTIONAL_FEATURES=y
          CONFIG_PACKAGE_tini=y
          # 终端
          CONFIG_PACKAGE_luci-app-ttyd=y
          #ssh连接
          CONFIG_PACKAGE_openssh-sftp-server=y
          # DiskMan 磁盘管理
          CONFIG_PACKAGE_blkid=y
          CONFIG_PACKAGE_fdisk=y          
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_mdadm=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_kmod_md_raid456=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_kmod_md_linear=y
          # 文件助手
          CONFIG_PACKAGE_luci-app-fileassistant=y
          CONFIG_PACKAGE_filebrowser=y
          CONFIG_PACKAGE_luci-app-filebrowser=y
          CONFIG_PACKAGE_luci-app-filetransfer=y

          
          # ssr
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Client=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_Obfs=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_Plugin=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
          # python ssr
          CONFIG_PACKAGE_luci-app-ssrserver-python=y
          # passwall
          CONFIG_PACKAGE_luci-app-passwall2=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-passwall_Transparent_Proxy=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_IPv6_Nat=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y
          # Windows激活
          CONFIG_PACKAGE_vlmcsd=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          # wireguard
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-i18n-wireguard-zh-cn=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_wireguard=y
          CONFIG_PACKAGE_wireguard-tools=y
          CONFIG_PACKAGE_kmod-wireguard=y
          # aria2下载工具
          CONFIG_PACKAGE_luci-app-aria2=y
          # 网络共享（Samba4）
          CONFIG_PACKAGE_luci-app-samba4=y
          # 监控CPU性能
          CONFIG_PACKAGE_netdata=y
          CONFIG_PACKAGE_luci-app-netdata=y
          # 测速
          CONFIG_PACKAGE_luci-app-netspeedtest=y
          CONFIG_PACKAGE_luci-i18n-netspeedtest-zh-cn=y
          #
          CONFIG_PACKAGE_luci-app-zerotier=y
          CONFIG_PACKAGE_ffmpeg=y
          CONFIG_PACKAGE_cloudflared=y
          # 证书ssl
          CONFIG_PACKAGE_luci-app-acme=y
          # 流量图形
          CONFIG_PACKAGE_luci-app-vnstat=y
          # UPNP
          CONFIG_PACKAGE_luci-app-upnp=y
          # 网络带宽监视器
          CONFIG_PACKAGE_luci-app-nlbwmon=y
          CONFIG_PACKAGE_luci-i18n-nlbwmon-zh-cn=y
          # smartdns
          CONFIG_PACKAGE_luci-app-smartdns=y
          # 证书ssl
          CONFIG_PACKAGE_luci-app-acme=y
          # 流量图形
          CONFIG_PACKAGE_luci-app-vnstat=y
          # UPNP
          CONFIG_PACKAGE_luci-app-upnp=y
                    
          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig                
      - name: up config
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_config
          path: ./openwrt/.config    
      
      - name: Make download
        run: |
          cd openwrt
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_buildinfo
          path: ./openwrt/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_package
          path: ./openwrt/artifact/package/
          
      - name: Deliver firmware
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_firmware
          path: ./openwrt/bin/targets/
          
      - name: Deliver img_gz
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_gz
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz
